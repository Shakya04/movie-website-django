import numpy as np

class Logistic_Regression:

    def __init__(self, learning_rate, no_of_iterations):
        self.learning_rate = learning_rate
        self.no_of_iterations = no_of_iterations

    def sigmoid(self, z):
        return 1 / (1 + np.exp(-z))

    def fit(self, X, Y):
        self.m, self.n = X.shape
        self.weights = np.zeros(self.n)
        self.bias = 0
        self.X = X
        self.Y = Y

        for i in range(self.no_of_iterations):
            self.update_model_parameters()

    def update_model_parameters(self):
        Y_hat = self.sigmoid(self.X.dot(self.weights) + self.bias)

        dw = (1 / self.m) * np.dot(self.X.T, (Y_hat - self.Y))
        db = (1 / self.m) * np.sum(Y_hat - self.Y)

        self.weights = self.weights - dw * self.learning_rate
        self.bias = self.bias - self.learning_rate * db

    def predict(self, X):
        Y_pred = 1 / (1 + np.exp(- (X.dot(self.weights) + self.bias)))
        Y_pred1 = np.where(Y_pred > 0.5, 1, 0)
        return Y_pred, Y_pred1